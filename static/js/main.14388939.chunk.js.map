{"version":3,"sources":["TodoContext.jsx","TodoItem.jsx","TodoList.jsx","TodosFilter.jsx","App.js","index.js"],"names":["TodoContext","React","createContext","todos","visibleTodos","setTodo","TodoItem","fun","todo","useContext","useState","isEditable","setIsEditable","title","changedValue","setChangedValue","htmlElRef","useRef","current","focus","useFocus","inputRef","setInputFocus","useEffect","key","id","className","classNames","completed","onDoubleClick","type","checked","onChange","map","todoThis","onClick","filter","event","target","value","autoFocus","ref","onBlur","onKeyDown","TodoList","console","log","TodosFilter","setValue","useMemo","JSON","parse","localStorage","getItem","handleClick","show","newValue","innerText","href","App","setTitle","initialValue","setItem","stringify","useLocalStorage","contextValue","Provider","onSubmit","preventDefault","newTodo","Date","placeholder","length","every","htmlFor","items","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14388939.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nexport const TodoContext = React.createContext({\n  todos: [],\n  visibleTodos: [],\n  setTodo: () => {}\n});\n\n  export const useLocalStorage = (key, initialValue) => {\n    const [value, setValue] = useState(() => {\n      try {\n        return JSON.parse(localStorage.getItem(key)) || initialValue;\n      } catch {\n        return initialValue;\n      }\n    });\n\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n// export const TodoProvider = ({children}) => {\n//   // const [title, setTitle] = useState('');\n//   const [todos, setTodo] = useState(\n//     JSON.parse(localStorage.getItem('todos') || [])\n//   );\n//   const contextValue = {\n//     todos,\n//     setTodo\n//   };\n  // const createTodo = (event) => {\n  //   event.preventDefault();\n  //   const newTodo = {\n  //     id: +new Date(),\n  //     title: title,\n  //     completed: false\n  //   };\n\n  //   setTodo([...todos, newTodo]);\n  //   localStorage.setItem('todos', JSON.stringify([...todos, newTodo]));\n  //   setTitle('');\n  // };\n\n//   return (\n//     <TodoContext.Provider value={contextValue}>\n//       {children}\n//     </TodoContext.Provider>\n//   )\n// }\n","import React, {useContext, useEffect, useState, useRef} from 'react';\nimport classNames from 'classnames';\nimport { TodoContext } from './TodoContext';\n\nexport const TodoItem = ({todo}) => {\n  let {visibleTodos, todos, setTodo} = useContext(TodoContext);\n  const [isEditable, setIsEditable] = useState(false);\n  const [changedValue, setChangedValue] = useState(todo.title);\n\n  const useMountEffect = (fun) => useEffect(fun, [isEditable]);\n\n  const useFocus = () => {\n    const htmlElRef = useRef(null);\n    const setFocus = () => {htmlElRef.current &&  htmlElRef.current.focus()}\n\n      return [ htmlElRef, setFocus ]\n  };\n\n  const [inputRef, setInputFocus] = useFocus();\n\n  useMountEffect( setInputFocus );\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames({\n        'completed': todo.completed,\n        'editing': isEditable\n      })}\n      onDoubleClick={() => {setIsEditable(true)}}\n    >\n      <div\n\n       className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => {\n            setTodo(todos.map(todoThis => todoThis.id === todo.id\n              ? {\n                  ...todoThis,\n                  completed: !todoThis.completed\n                }\n              : todoThis\n            ))\n          }}\n        />\n        <label>{todo.title}</label>\n        <button type=\"button\" className=\"destroy\" onClick={() => {\n          setTodo(todos.filter(todoThis => todoThis.id !== todo.id))\n        }}/>\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        onChange={(event) => setChangedValue(event.target.value)}\n        value={changedValue}\n        autoFocus={true}\n        ref={inputRef}\n        // ref={ function(component){ React.findDOMNode(component).focus();} }\n        onBlur={() => {\n          if (changedValue !== '') {\n              setTodo(todos.map(todoThis => todoThis.id === todo.id\n                ? {\n                    ...todoThis,\n                    title: changedValue\n                  }\n                : todoThis\n              ));\n              setIsEditable(false);\n            } else {\n              setTodo(todos.filter(todoThis => todoThis.id !== todo.id));\n              setIsEditable(false);\n            }\n          setIsEditable(false)\n        }}\n        onKeyDown={(event) =>{\n          if (event.key === 'Enter') {\n            if (changedValue !== '') {\n              setTodo(todos.map(todoThis => todoThis.id === todo.id\n                ? {\n                    ...todoThis,\n                    title: changedValue\n                  }\n                : todoThis\n              ));\n              setIsEditable(false);\n            } else {\n              setTodo(todos.filter(todoThis => todoThis.id !== todo.id));\n              setIsEditable(false);\n            }\n          }\n\n          if (event.key === 'Escape') {\n            setChangedValue(todo.title);\n            setIsEditable(false);\n          }\n        }}\n      />\n    </li>\n  );\n};\n\n\n// this.textInput = React.createRef();\n//     this.focusTextInput = this.focusTextInput.bind(this);\n//   }\n\n  // focusTextInput() {\n  //   // Explicitly focus the text input using the raw DOM API\n  //   // Note: we're accessing \"current\" to get the DOM node\n  //   this.textInput.current.focus();\n  // }\n\n  // render() {\n  //   // tell React that we want to associate the <input> ref\n  //   // with the `textInput` that we created in the constructor\n  //   return (\n  //     <div>\n  //       <input\n  //         type=\"text\"\n  //         ref={this.textInput} />\n  //       <input\n  //         type=\"button\"\n  //         value=\"Focus the text input\"\n  //         onClick={this.focusTextInput}\n","import React, {useContext} from 'react';\nimport { TodoContext } from './TodoContext';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = () => {\n  let {todos, visibleTodos} = useContext(TodoContext);\n  console.log(todos);\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo =>\n        <TodoItem todo={todo} />\n        )}\n\n    </ul>\n  );\n};\n","import React, { useContext, useState, useEffect, useMemo } from \"react\";\nimport { TodoContext } from \"./TodoContext\";\nimport classNames from 'classnames';\n\nexport const TodosFilter = () => {\n  let {todos, visibleTodos, setTodo} = useContext(TodoContext);\n\n  const [value, setValue] = useState('All');\n\n  useEffect(() => {\n    visibleTodos = [{title: 1}]\n  }, []);\nlet fun = useMemo(() => JSON.parse(localStorage.getItem('todos')), []);\n  const handleClick = (event) => {\n    const newValue = event.target.innerText;\n    setValue(newValue);\n\n    let show;\n    console.log(fun);\n    switch (newValue) {\n      case 'All':\n        show = fun;\n        break;\n      case 'Active':\n        show = fun.filter(todo => !todo.completed);\n        break;\n      case 'Completed':\n        show = fun.filter(todo => todo.completed);\n        break;\n    };\n    setTodo(show)\n\n  }\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({'selected': value === 'All'})}\n          onClick={handleClick}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({'selected': value === 'Active'})}\n          onClick={handleClick}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({'selected': value === 'Completed'})}\n          onClick={handleClick}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, {useState, useContext} from 'react';\nimport { TodoContext, useLocalStorage} from './TodoContext';\nimport {TodoList} from './TodoList';\nimport { TodosFilter } from './TodosFilter';\n\nfunction App() {\n  const [title, setTitle] = useState('');\nlet {visibleTodos} = useContext(TodoContext);\n  const [todos, setTodo] = useLocalStorage('todos', []);\n\n  const createTodo = (event) => {\n    event.preventDefault();\n    const newTodo = {\n      id: +new Date(),\n      title: title,\n      completed: false\n    };\n\n    if (title === '') {\n      return\n    }\n\n    setTodo([...todos, newTodo]);\n    localStorage.setItem('todos', JSON.stringify([...todos, newTodo]));\n    setTitle('');\n  };\n\n  let contextValue = {\n    todos,\n    visibleTodos,\n    setTodo\n  };\n\n  return (\n    <TodoContext.Provider value={contextValue}>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={createTodo}>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={title}\n              onChange={(event) => {\n\n                setTitle(event.target.value)\n              }}\n            />\n          </form>\n        </header>\n\n\n\n        {todos.length > 0 && <>\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.every(todoThis => todoThis.completed)}\n            onChange={() => {\n              todos.every(todoThis => todoThis.completed)\n              ? setTodo(todos.map(todoThis => ({\n                ...todoThis,\n                completed: false\n              })))\n              : setTodo(todos.map(todoThis => ({\n                ...todoThis,\n                completed: true\n              })))\n            }}\n          />\n          <label htmlFor=\"toggle-all\">\n            Mark all as complete\n            </label>\n          <TodoList items={todos} />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${todos.filter(todoThis => !todoThis.completed).length} items left`}\n          </span>\n\n          <TodosFilter />\n\n          {todos.some(todoThis => todoThis.completed) && <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => {\n            setTodo(todos.filter(todoThis => !todoThis.completed))\n          }}\n          >\n            Clear completed\n          </button>}\n        </footer>\n        </>}\n      </section>\n    </TodoContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}