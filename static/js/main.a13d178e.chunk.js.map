{"version":3,"sources":["TodoContext.jsx","TodoItem.jsx","TodoList.jsx","TodosFilter.jsx","App.js","index.js"],"names":["TodoContext","React","createContext","todos","setTodo","TodoItem","fun","todo","useContext","useState","isEditable","setIsEditable","title","changedValue","setChangedValue","htmlElRef","useRef","current","focus","useFocus","inputRef","setInputFocus","useEffect","key","id","className","classNames","completed","editing","onDoubleClick","type","checked","onChange","map","todoThis","onClick","filter","event","target","value","ref","onBlur","onKeyDown","TodoList","visibleTodos","TodosFilter","setVisibleTodos","setValue","handleClick","todosToBeShown","newValue","innerText","href","selected","App","setTitle","initialValue","JSON","parse","localStorage","getItem","setItem","stringify","useLocalStorage","contextValue","Provider","onSubmit","preventDefault","newTodo","Date","placeholder","length","every","htmlFor","some","ReactDOM","render","document","getElementById"],"mappings":"4SAEaA,EAAcC,IAAMC,cAAc,CAC7CC,MAAO,GACPC,QAAS,e,gBCCEC,EAAW,SAAC,GAAc,IAKdC,EALEC,EAAW,EAAXA,KAAW,EACTC,qBAAWR,GAA9BG,EAD4B,EAC5BA,MAAOC,EADqB,EACrBA,QADqB,EAEAK,oBAAS,GAFT,mBAE7BC,EAF6B,KAEjBC,EAFiB,OAGIF,mBAASF,EAAKK,OAHlB,mBAG7BC,EAH6B,KAGfC,EAHe,OAOnB,WACf,IAAMC,EAAYC,iBAAO,MAKzB,MAAO,CAACD,EAJS,WACfA,EAAUE,SAAWF,EAAUE,QAAQC,UAMTC,GAhBE,mBAgB7BC,EAhB6B,KAgBnBC,EAhBmB,KAoBpC,OAfuBf,EAaRe,EAbeC,oBAAUhB,EAAK,CAACI,IAgB5C,wBACEa,IAAKhB,EAAKiB,GACVC,UAAWC,IAAW,CACpBC,UAAWpB,EAAKoB,UAChBC,QAASlB,IAEXmB,cAAe,WACblB,GAAc,KAGhB,yBAAKc,UAAU,QACb,2BACEK,KAAK,WACLL,UAAU,SACVM,QAASxB,EAAKoB,UACdK,SAAU,WACR5B,EAAQD,EAAM8B,KAAI,SAAAC,GAAQ,OAAKA,EAASV,KAAOjB,EAAKiB,GAArB,2BAExBU,GAFwB,IAG3BP,WAAYO,EAASP,YAErBO,SAGR,+BAAQ3B,EAAKK,OACb,4BACEkB,KAAK,SACLL,UAAU,UACVU,QAAS,WACP/B,EAAQD,EAAMiC,QAAO,SAAAF,GAAQ,OAAIA,EAASV,KAAOjB,EAAKiB,WAI5D,2BACEM,KAAK,OACLL,UAAU,OACVO,SAAU,SAAAK,GAAK,OAAIvB,EAAgBuB,EAAMC,OAAOC,QAChDA,MAAO1B,EACP2B,IAAKpB,EACLqB,OAAQ,WACe,KAAjB5B,GACFT,EAAQD,EAAM8B,KAAI,SAAAC,GAAQ,OAAKA,EAASV,KAAOjB,EAAKiB,GAArB,2BAExBU,GAFwB,IAG3BtB,MAAOC,IAEPqB,MACJvB,GAAc,KAEdP,EAAQD,EAAMiC,QAAO,SAAAF,GAAQ,OAAIA,EAASV,KAAOjB,EAAKiB,OACtDb,GAAc,IAGhBA,GAAc,IAEhB+B,UAAW,SAACL,GACQ,UAAdA,EAAMd,MACa,KAAjBV,GACFT,EAAQD,EAAM8B,KAAI,SAAAC,GAAQ,OAAKA,EAASV,KAAOjB,EAAKiB,GAArB,2BAExBU,GAFwB,IAG3BtB,MAAOC,IAEPqB,MACJvB,GAAc,KAEdP,EAAQD,EAAMiC,QAAO,SAAAF,GAAQ,OAAIA,EAASV,KAAOjB,EAAKiB,OACtDb,GAAc,KAIA,WAAd0B,EAAMd,MACRT,EAAgBP,EAAKK,OACrBD,GAAc,SC/FbgC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OACtB,wBAAInB,UAAU,aACXmB,EAAaX,KAAI,SAAA1B,GAAI,OAAI,kBAAC,EAAD,CAAUA,KAAMA,SCDjCsC,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACpB3C,EAAUK,qBAAWR,GAArBG,MAD0C,EAExBM,mBAAS,OAFe,mBAE3C8B,EAF2C,KAEpCQ,EAFoC,KAI5CC,EAAc,SAACX,GACnB,IAIIY,EAJEC,EAAWb,EAAMC,OAAOa,UAM9B,OAJAJ,EAASG,GAIDA,GACN,IAAK,MACHD,EAAiB9C,EACjB,MACF,IAAK,SACH8C,EAAiB9C,EAAMiC,QAAO,SAAA7B,GAAI,OAAKA,EAAKoB,aAC5C,MACF,IAAK,YACHsB,EAAiB9C,EAAMiC,QAAO,SAAA7B,GAAI,OAAIA,EAAKoB,aAC3C,MACF,QACEsB,EAAiB9C,EAGrB2C,EAAgBG,IAGlB,OACE,wBAAIxB,UAAU,WACZ,4BACE,uBACE2B,KAAK,KACL3B,UAAWC,IAAW,CAAE2B,SAAoB,QAAVd,IAClCJ,QAASa,GAHX,QASF,4BACE,uBACEI,KAAK,WACL3B,UAAWC,IAAW,CAAE2B,SAAoB,WAAVd,IAClCJ,QAASa,GAHX,WASF,4BACE,uBACEI,KAAK,cACL3B,UAAWC,IAAW,CAAE2B,SAAoB,cAAVd,IAClCJ,QAASa,GAHX,gBCmDOM,MAtGf,WAAgB,IAAD,EACa7C,mBAAS,IADtB,mBACNG,EADM,KACC2C,EADD,OJEgB,SAAChC,EAAKiC,GAAkB,IAAD,EAC1B/C,oBAAS,WACjC,IACE,OAAOgD,KAAKC,MAAMC,aAAaC,QAAQrC,KAASiC,EAChD,SACA,OAAOA,MALyC,mBAC7CjB,EAD6C,KACtCQ,EADsC,KAcpD,MAAO,CAACR,EALK,SAACW,GACZH,EAASG,GACTS,aAAaE,QAAQtC,EAAKkC,KAAKK,UAAUZ,MIXlBa,CAAgB,QAAS,IAFrC,mBAEN5D,EAFM,KAECC,EAFD,OAG2BK,mBAAS,IAHpC,mBAGNmC,EAHM,KAGQE,EAHR,KAKbxB,qBAAU,WACRwB,EAAgB3C,KACf,CAACA,IAEJ,IAiBM6D,EAAe,CACnB7D,QACAC,WAGF,OACE,kBAACJ,EAAYiE,SAAb,CAAsB1B,MAAOyB,GAC3B,6BAASvC,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,0BAAMyC,SA3BK,SAAC7B,GAClBA,EAAM8B,iBACN,IAAMC,EAAU,CACd5C,IAAK,IAAI6C,KACTzD,QACAe,WAAW,GAGC,KAAVf,IAIJR,EAAQ,GAAD,mBAAKD,GAAL,CAAYiE,KACnBT,aAAaE,QAAQ,QAASJ,KAAKK,UAAL,sBAAmB3D,GAAnB,CAA0BiE,MACxDb,EAAS,OAcD,2BACEzB,KAAK,OACLL,UAAU,WACV6C,YAAY,yBACZ/B,MAAO3B,EACPoB,SAAU,SAACK,GACTkB,EAASlB,EAAMC,OAAOC,YAM7BpC,EAAMoE,OAAS,GAEd,oCACE,6BAAS9C,UAAU,QACjB,2BACEK,KAAK,WACLN,GAAG,aACHC,UAAU,aACVM,QAAS5B,EAAMqE,OAAM,SAAAjE,GAAI,OAAIA,EAAKoB,aAClCK,SAAU,WACR5B,EAAQD,EAAM8B,KAAI,SAAAC,GAAQ,kCACrBA,GADqB,IAExBP,WAAYxB,EAAMqE,OAAM,SAAAtC,GAAQ,OAAIA,EAASP,sBAInD,2BAAO8C,QAAQ,cAAf,wBAGA,kBAAC,EAAD,CAAU7B,aAAcA,KAG1B,4BAAQnB,UAAU,UAChB,0BAAMA,UAAU,cAAhB,UACMtB,EAAMiC,QAAO,SAAAF,GAAQ,OACtBA,EAASP,aACT4C,OAHL,gBAMA,kBAAC,EAAD,CAAazB,gBAAiBA,IAE7B3C,EAAMuE,MAAK,SAAAxC,GAAQ,OAAIA,EAASP,cAE/B,4BACEG,KAAK,SACLL,UAAU,kBACVU,QAAS,WACP/B,EAAQD,EAAMiC,QAAO,SAAAF,GAAQ,OAAKA,EAASP,gBAJ/C,wBC9EhBgD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.a13d178e.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const TodoContext = React.createContext({\n  todos: [],\n  setTodo: () => {},\n});\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n","import React, { useContext, useEffect, useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoContext } from './TodoContext';\n\nexport const TodoItem = ({ todo }) => {\n  const { todos, setTodo } = useContext(TodoContext);\n  const [isEditable, setIsEditable] = useState(false);\n  const [changedValue, setChangedValue] = useState(todo.title);\n\n  const useMountEffect = fun => useEffect(fun, [isEditable]);\n\n  const useFocus = () => {\n    const htmlElRef = useRef(null);\n    const setFocus = () => {\n      htmlElRef.current && htmlElRef.current.focus();\n    };\n\n    return [htmlElRef, setFocus];\n  };\n\n  const [inputRef, setInputFocus] = useFocus();\n\n  useMountEffect(setInputFocus);\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames({\n        completed: todo.completed,\n        editing: isEditable,\n      })}\n      onDoubleClick={() => {\n        setIsEditable(true);\n      }}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => {\n            setTodo(todos.map(todoThis => (todoThis.id === todo.id\n              ? {\n                ...todoThis,\n                completed: !todoThis.completed,\n              }\n              : todoThis)));\n          }}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            setTodo(todos.filter(todoThis => todoThis.id !== todo.id));\n          }}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        onChange={event => setChangedValue(event.target.value)}\n        value={changedValue}\n        ref={inputRef}\n        onBlur={() => {\n          if (changedValue !== '') {\n            setTodo(todos.map(todoThis => (todoThis.id === todo.id\n              ? {\n                ...todoThis,\n                title: changedValue,\n              }\n              : todoThis)));\n            setIsEditable(false);\n          } else {\n            setTodo(todos.filter(todoThis => todoThis.id !== todo.id));\n            setIsEditable(false);\n          }\n\n          setIsEditable(false);\n        }}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter') {\n            if (changedValue !== '') {\n              setTodo(todos.map(todoThis => (todoThis.id === todo.id\n                ? {\n                  ...todoThis,\n                  title: changedValue,\n                }\n                : todoThis)));\n              setIsEditable(false);\n            } else {\n              setTodo(todos.filter(todoThis => todoThis.id !== todo.id));\n              setIsEditable(false);\n            }\n          }\n\n          if (event.key === 'Escape') {\n            setChangedValue(todo.title);\n            setIsEditable(false);\n          }\n        }}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ visibleTodos }) => (\n  <ul className=\"todo-list\">\n    {visibleTodos.map(todo => <TodoItem todo={todo} />)}\n\n  </ul>\n);\n\nTodoList.propTypes = {\n  visibleTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bul.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n};\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoContext } from './TodoContext';\n\nexport const TodosFilter = ({ setVisibleTodos }) => {\n  const { todos } = useContext(TodoContext);\n  const [value, setValue] = useState('All');\n\n  const handleClick = (event) => {\n    const newValue = event.target.innerText;\n\n    setValue(newValue);\n\n    let todosToBeShown;\n\n    switch (newValue) {\n      case 'All':\n        todosToBeShown = todos;\n        break;\n      case 'Active':\n        todosToBeShown = todos.filter(todo => !todo.completed);\n        break;\n      case 'Completed':\n        todosToBeShown = todos.filter(todo => todo.completed);\n        break;\n      default:\n        todosToBeShown = todos;\n    }\n\n    setVisibleTodos(todosToBeShown);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({ selected: value === 'All' })}\n          onClick={handleClick}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({ selected: value === 'Active' })}\n          onClick={handleClick}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({ selected: value === 'Completed' })}\n          onClick={handleClick}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  setVisibleTodos: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoContext, useLocalStorage } from './TodoContext';\nimport { TodoList } from './TodoList';\nimport { TodosFilter } from './TodosFilter';\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [todos, setTodo] = useLocalStorage('todos', []);\n  const [visibleTodos, setVisibleTodos] = useState([]);\n\n  useEffect(() => {\n    setVisibleTodos(todos);\n  }, [todos]);\n\n  const createTodo = (event) => {\n    event.preventDefault();\n    const newTodo = {\n      id: +new Date(),\n      title,\n      completed: false,\n    };\n\n    if (title === '') {\n      return;\n    }\n\n    setTodo([...todos, newTodo]);\n    localStorage.setItem('todos', JSON.stringify([...todos, newTodo]));\n    setTitle('');\n  };\n\n  const contextValue = {\n    todos,\n    setTodo,\n  };\n\n  return (\n    <TodoContext.Provider value={contextValue}>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={createTodo}>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={title}\n              onChange={(event) => {\n                setTitle(event.target.value);\n              }}\n            />\n          </form>\n        </header>\n\n        {todos.length > 0\n          && (\n          <>\n            <section className=\"main\">\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                checked={todos.every(todo => todo.completed)}\n                onChange={() => {\n                  setTodo(todos.map(todoThis => ({\n                    ...todoThis,\n                    completed: !todos.every(todoThis => todoThis.completed),\n                  })));\n                }}\n              />\n              <label htmlFor=\"toggle-all\">\n                Mark all as complete\n              </label>\n              <TodoList visibleTodos={visibleTodos} />\n            </section>\n\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {`${todos.filter(todoThis => (\n                  !todoThis.completed\n                )).length} items left`}\n              </span>\n\n              <TodosFilter setVisibleTodos={setVisibleTodos} />\n\n              {todos.some(todoThis => todoThis.completed)\n                && (\n                <button\n                  type=\"button\"\n                  className=\"clear-completed\"\n                  onClick={() => {\n                    setTodo(todos.filter(todoThis => !todoThis.completed));\n                  }}\n                >\n                  Clear completed\n                </button>\n                )\n              }\n            </footer>\n          </>\n          )\n        }\n      </section>\n    </TodoContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}